{"ast":null,"code":"var _jsxFileName = \"/Users/saad/WebstormProjects/word-fort/src/WordEntry.js\";\nimport React from 'react';\nimport './WordEntry.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass WordEntry extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      word: null,\n      phonetic: null,\n      meanings: {}\n    };\n  }\n\n  setupWordLesson(data) {\n    this.setState({\n      word: data[0][\"word\"],\n      phonetic: data[0][\"phonetic\"],\n      definitions: this.getMeanings(data[0][\"meanings\"])\n    });\n  }\n\n  getMeanings(meanings) {\n    let definitions = {};\n    console.log(meanings);\n\n    for (let meaning in meanings) {\n      consoe;\n      let m = {\n        partOfSpeech: meaning[\"partOfSpeech\"],\n        definitions: []\n      };\n\n      for (let definition in meanings[\"definitions\"]) {\n        m.definitions.push(definition[\"definition\"]);\n      }\n\n      console.log(m);\n    }\n\n    return meanings;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.word != null && /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"lesson\",\n        children: /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [this.state.word, \" \\u2022 /\", this.state.phonetic, \"/\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default WordEntry;","map":{"version":3,"sources":["/Users/saad/WebstormProjects/word-fort/src/WordEntry.js"],"names":["React","WordEntry","Component","constructor","props","state","word","phonetic","meanings","setupWordLesson","data","setState","definitions","getMeanings","console","log","meaning","consoe","m","partOfSpeech","definition","push","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAN,SAAwBD,KAAK,CAACE,SAA9B,CAAwC;AAEpCC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACTC,MAAAA,IAAI,EAAE,IADG;AAETC,MAAAA,QAAQ,EAAE,IAFD;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAKH;;AAEDC,EAAAA,eAAe,CAACC,IAAD,EAAO;AAClB,SAAKC,QAAL,CAAc;AACVL,MAAAA,IAAI,EAAEI,IAAI,CAAC,CAAD,CAAJ,CAAQ,MAAR,CADI;AAEVH,MAAAA,QAAQ,EAAEG,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,CAFA;AAGVE,MAAAA,WAAW,EAAE,KAAKC,WAAL,CAAiBH,IAAI,CAAC,CAAD,CAAJ,CAAQ,UAAR,CAAjB;AAHH,KAAd;AAKH;;AAEDG,EAAAA,WAAW,CAACL,QAAD,EAAW;AAClB,QAAII,WAAW,GAAG,EAAlB;AAEAE,IAAAA,OAAO,CAACC,GAAR,CAAYP,QAAZ;;AAEA,SAAK,IAAIQ,OAAT,IAAoBR,QAApB,EAA8B;AAC1BS,MAAAA,MAAM;AACN,UAAIC,CAAC,GAAG;AAACC,QAAAA,YAAY,EAAEH,OAAO,CAAC,cAAD,CAAtB;AAAwCJ,QAAAA,WAAW,EAAE;AAArD,OAAR;;AAEA,WAAK,IAAIQ,UAAT,IAAuBZ,QAAQ,CAAC,aAAD,CAA/B,EAAgD;AAC5CU,QAAAA,CAAC,CAACN,WAAF,CAAcS,IAAd,CAAmBD,UAAU,CAAC,YAAD,CAA7B;AACH;;AAEDN,MAAAA,OAAO,CAACC,GAAR,CAAYG,CAAZ;AACH;;AAGD,WAAOV,QAAP;AACH;;AAEDc,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,gBACK,KAAKjB,KAAL,CAAWC,IAAX,IAAmB,IAAnB,iBACG;AAAK,QAAA,EAAE,EAAC,QAAR;AAAA,+BACI;AAAA,qBAAK,KAAKD,KAAL,CAAWC,IAAhB,eAA0B,KAAKD,KAAL,CAAWE,QAArC;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AAjDmC;;AAoDxC,eAAeN,SAAf","sourcesContent":["import React from 'react';\nimport './WordEntry.css'\n\nclass WordEntry extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            word: null,\n            phonetic: null,\n            meanings: {}\n        }\n    }\n\n    setupWordLesson(data) {\n        this.setState({\n            word: data[0][\"word\"],\n            phonetic: data[0][\"phonetic\"],\n            definitions: this.getMeanings(data[0][\"meanings\"])\n        })\n    }\n\n    getMeanings(meanings) {\n        let definitions = {};\n\n        console.log(meanings);\n\n        for (let meaning in meanings) {\n            consoe\n            let m = {partOfSpeech: meaning[\"partOfSpeech\"], definitions: []};\n\n            for (let definition in meanings[\"definitions\"]) {\n                m.definitions.push(definition[\"definition\"]);\n            }\n\n            console.log(m);\n        }\n\n\n        return meanings;\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.word != null &&\n                    <div id=\"lesson\">\n                        <h2>{this.state.word} â€¢ /{this.state.phonetic}/</h2>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default WordEntry;"]},"metadata":{},"sourceType":"module"}