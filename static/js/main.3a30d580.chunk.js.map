{"version":3,"sources":["WordEntry.js","App.js","reportWebVitals.js","index.js"],"names":["WordEntry","props","state","word","phonetic","origin","definitions","data","this","setState","parseDefinitions","meaningsData","i","length","defs","j","push","partOfSpeech","meanings","id","getDefinitions","React","Component","App","today","Date","toDateString","split","slice","todaysDate","lesson","createRef","handleSubmit","bind","fetchWordEntry","event","preventDefault","current","clearWord","FormData","target","get","document","getElementById","value","fetch","then","response","json","console","log","undefined","setupWordLesson","onSubmit","name","className","placeholder","type","ref","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.3a30d580.chunk.js","sourcesContent":["import React from 'react';\nimport './WordEntry.css'\n\nclass WordEntry extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            word: null,\n            phonetic: null,\n            origin: null,\n            definitions: []\n        }\n    }\n\n    setupWordLesson(data) {\n        this.setState({\n            word: data[0][\"word\"],\n            phonetic: data[0][\"phonetic\"],\n            origin: data[0][\"origin\"],\n            definitions: this.parseDefinitions(data[0][\"meanings\"])\n        })\n    }\n\n    parseDefinitions(meaningsData) {\n        let definitions = [];\n\n        for (let i = 0; i < meaningsData.length; i++) {\n            let defs = [];\n\n            for(let j = 0; j < meaningsData[i][\"definitions\"].length; j++) {\n                defs.push(meaningsData[i][\"definitions\"][j][\"definition\"]);\n            }\n\n            definitions.push({partOfSpeech: meaningsData[i][\"partOfSpeech\"], meanings: defs});\n        }\n\n        return definitions;\n    }\n\n    getDefinitions() {\n        let definitions = [];\n\n        for (let i = 0; i < this.state.definitions.length; i++) {\n            definitions.push((<h4>{this.state.definitions[i][\"partOfSpeech\"]}</h4>));\n\n            for(let j = 0; j < this.state.definitions[i][\"meanings\"].length; j++) {\n                definitions.push((<h6> — {this.state.definitions[i][\"meanings\"][j]}</h6>));\n            }\n        }\n\n        return definitions;\n    }\n\n    clearWord() {\n        this.setState({word: null});\n    }\n\n    render() {\n        return (\n            <div>\n                {this.state.word != null &&\n                    <div id=\"lesson\">\n                        <h2>{this.state.word} • /{this.state.phonetic}/</h2>\n                        <em><h8>{this.state.origin}</h8></em>\n                        <br />\n                        <br />\n                        <div>{this.getDefinitions()}</div>\n                    </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default WordEntry;\n","import React from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport './App.css';\nimport WordEntry from './WordEntry.js';\n\nclass App extends React.Component {\n\n  constructor(props) {\n      super(props);\n      this.state = {\n          word: null\n      }\n      let today = new Date().toDateString().split(\" \").slice(1);\n      this.todaysDate = today[0] + \" \" + today[1] + \", \" + today[2];\n      this.lesson = React.createRef();\n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.fetchWordEntry = this.fetchWordEntry.bind(this);\n  }\n\n  handleSubmit(event) {\n      event.preventDefault();\n      this.lesson.current.clearWord();\n      let word = new FormData(event.target).get(\"word\");\n      document.getElementById(\"wordInput\").value = \"\";\n      this.fetchWordEntry(word);\n      this.setState({word : word});\n  }\n\n  fetchWordEntry(word) {\n      fetch(\"https://api.dictionaryapi.dev/api/v2/entries/en/\" + word)\n          .then(response => response.json())\n          .then(data => {\n              console.log(data);\n              if (data.length === undefined)\n                  return this.fetchWordEntry(\"erroneous\");\n\n              this.lesson.current.setupWordLesson(data);\n          })\n  }\n\n  render() {\n      return (\n      <div>\n        <h1 id=\"titleLabel\">WordFort</h1>\n        <div id=\"miscLabels\">\n            <h6>ENG1.01</h6>\n            <h6>{this.todaysDate}</h6>\n        </div>\n        <form id=\"wordSearcher\" onSubmit={this.handleSubmit}>\n            <input id=\"wordInput\" name=\"word\" className=\"form-control form-control-lg\" placeholder=\"Enter word\"/>\n            <button id=\"submitButton\" type=\"submit\" className=\"btn btn-primary\"><i className=\"bi bi-search\" /></button>\n        </form>\n        <WordEntry ref={this.lesson} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}